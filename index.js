'use strict'

// alert ('Я JavaScript');

// однострочный комментарий
/* многостроынй
комментарий */


//let message // объявляем переменную message
//message = "Hello" // присваиваем ей значение
//alert (message)  // вызываем значение переменной на экран

//let message2 = "World" // объявляем и тут же присваиваем значение переменной message2

//let user ="Ded", age = "80" , message3 = "Hello" // плохая практика, низкая читаемость кода. Объявлять переменные строго на новой строке.


// можно менять значения переменных
//let value; // Объявляем переменную
//value = "1;" // Присваиваем ей значение
//value = "2"; // Присваеваем ей новое значение. Старое значение безвозвратно удаляется
//alert(value);

//можно копировать значение одной переменной напрямую в другую
//let hello = "Hello Kurwa"; // объявляем и присваиваем значение первой переменной
//let message4; // объявляем но не присваиваем значение второй
//message4 = hello; // присваиваем значение одной функции другой, одинаковые данные у обеих функций
//alert (hello);
//alert(message4);
// Имя переменной не может начинаться с цифры
// Имя переменной не может содержать спецсимволы, только $ и _
// JS регистрочувствителен!
//let - изменяемая переменная
//const - неизменяемая переменная. Может быть присвоена лишь один раз и сохранит своё значение.
// const COLOR_ORANGE = "FF7f00" - пример записи заранее известной константы. Их принято записывать заглавными.
//let admin;
//let name = "Джон";
//admin = name;
//alert (admin);


//********************************************Числа / Numbers*****************************************************
//
//Могут быть как целыми, так и с плавающей запятой.
//Let n = 12345
//n=12.345
//Есть специальные значения
//Это
//NAN - Not a number - результат ошибки, операции не над числовым значением
//Если в решении хоть где-то появляется NaN - он распространится дальше, любая операция над NaN даёт результат NaN.
//Исключение лишь NaN ** 0 - результат будет 1.  (возведение в 0 степень, результат всегда 1)
// Infinity - это + бесконечность, результат деления на 0
// -Infinity - это - бесконечность
//Математические операции в JS безопасны и не могут повесить комп. Скрипт не остановится с фатальными ошибками из-за ошибочных цифр, он выдаст NaN.
//Number\цифры ограничены диапазоном -(2**53-1) - (2**53-1) - от -9007199254740991 до 9007199254740991. Это безопасный пул. Полный доступный больше, но там присутствуют ошибки точности.
//Это связано с 64 битами на память в цикл, все цифры туда не помешаются. Начинает происходить округление до ближайшего четного числа, нечетные исчезают как явление.
//Для работы с огромными цифрами (для криптографии, или таймстампы с микросекундами) был добавлен новый тип данных - BigInt.
//Добавлен он был для работы с ЦЕЛЫМИ числами любой длины. Он задаётся буквой n в конце числового ряда.
//let a=123456789 - это обычный number
//let b=123456789n - это уже BigInt
//Но это редко необходимый тип цифр.
// BigInt не везде поддерживается, его нет в IE (пиздец потеря, но для древних скриптов это важно).


//**************************************************STRING\СТРОКА********************************************************
// Строка может быть пустой или содержать любое число символов, это всё равно будет строка.
// Строка\string всегда должна задаваться в кавычках. Вид кавычек не важен, пойдут и одинарные и двойные. "" = ''.
//let a = 'Привет'
//let b = "Привет"
// Разницы в их применении нет, обе работают одинаково.
// Всего в JS три вида кавычек:
// 1. Одинарные - ''
// 2. Двойные - ""
// 3. Обратные - ``
// Одинарные и двойные равны между собой, но обратные имеют расширенный функционал.
// Они позволяют встраивать значения выражений\переменных в стоку.

// let name2 = "Bober"; - объявляем пременную name2 со значением Bober
// alert (`Привет, ${name2}`); - выводим на экран алерт, в нём будет содержаться Привет и встроено значние переменной name2 = Привет, Bober

// Внутри ${…} происходит вычисление переменной, встраивается уже её результат. Встроено может быть что угодно.
// Встраивать могут только обратные кавычки ``, никакие другие кавычки так не смогут!


// ******************************** Bolean\ Булевые данные ****************************************
// Из названия всё ясно, эти данные могут быть только True \ False
// Используется именно для хранения этих значений. Может быть использовано для сравнений Например:

// let = nameFieldChecked = true; - присвоено значение что поле отмечено
// let = ageFieldChecked = false; - присвоено значение что поле не отмечено

//  let isGreater = 4>1; происходит сравнение 4 и 1
//  alert (isGreater); выводится на экран результат сравнения (true, ведь 4 реально больше 1)


// **************************************** Null **************************************************
// В JS это специальное значение, которое представляет собой ничто, пусто или неизвестное значение.
// Это отдельный тип данных, не относящихся ни к какому другому.
// Например
// let age = null; - значение age устанавливается как неизвестное


// ****************************************** Undefined ***********************************************
// Ещё одно специальное значение. Формирует отдельный тип данных, как и null - только из себя самого. Означает неприсвоенность значения.
// Если переменная была объявлена, но ей не было присвоено значение, то она будет равна именно undefined.
// Наример:
// let age2; - объявляем переменную, у неё нет значения, его не присвоили
// alert (age2); - выводим и видим что её значение undefined
// Отличает от null в том, что null присваевается, а undefined идёт по умолчанию. Никто не мешает присваивать переменным undefined значение,
// но это считается плохой практикой. Undefined помогает найти неприсвоенные из-за ошибки значения.


// ************************************************* Symbol \ символ *****************************************
// Для помощи в работе с object используется symbol (примерно как id в css) для создания уникальных идентификаторов внутри объектов.


// ********************************************** Object \ Объёкты ****************************************
// Сложный тип данных. Все остальные "примитивные", в них содержится только их тип данных.
//  В Object могут содержаться наборы данных или более сложные структуры.


// ************************************************** Type of *************************************************
// При применении возвращает пользователю тип указанного аргумента.
// Полезно для проверок или если данные разных типов будут обрабатываться по разному. У него 2 формы использования
// Например:
// alert (typeof 5); - выведет на экран тип данных для цифры "5" - то есть "number"
// Может применяться в виде похожем на вызов функции, но редко, например:
// alert (typeof(5)) - выведет на экран тип данных для цифры "5" - то есть "number"
// Если проверяется выражение, то оно должно заключаться в скобки, тк typeof стригеррится на первые идущие за ним данные.
// alert(typeof 50 + "квартир") - выведет на экран numberквартир, функция стригериласть на 50 и добавила "квартир следом"
// скобки необходимы для поиска типа итогового выражения в них, а не первой попавшейся его части
// alert(typeof(50+"квартир")) - выведет на экран итоговый тип данных от сложения number и string, то есть string

// let name3 = "Ya";
// alert( `hello ${1}` ); // hello 1
// alert( `hello ${"name3"}` ); // hello name3
// alert( `hello ${name3}` );  // hello Ya





// *********************************************** Alert \ Prompt \ Confirm ********************************************


// alert - показывает модальное окно с указанным сообщением. Модальное окно это окно что не даёт ни с чем другим взаимодействовать
// пока его не закроют. Например:
//alert ("Hello");  - откроет окно с текстом Hello


// prompt - отобразит модальное окно с текстом, полем для ввода текста и кнопками ок и отмена.


// result = prompt('title', [default]); - пользователь получит окно с полем ввода. Введёные туда данные попадут в переменную result.
// В случае если пользователь нажмёт "отмена", то переменной присвоится значение null.

// title - это текст для отображения в модальном окне, должен быть в кавычках
// default - цифра что забита в ответе по умолчанию
// [] квадратные скобки показывают опциональность этого параметра. Функцию можно использовать и без него.

// let age = prompt("сколько тебе лет?",''); спрашиваем пользователя, полученный ответ присваиваем как значение переменной age 
// alert (`Тебе ${age} лет, дед!`) выводим на экран string со вставленной через обратные кавычки ` переменной age
// для IE всегда нужен необязательный параметр, можно оставлять его пустым через пару пустых кавычек ''.


// ************************************************* Confirm ****************************************************
// Эта функция создаст окно с вопросом и ответами OK \ Отмена. При нажатии соответствующего ответа результату будет присвоен
// // true или false.
// result2 = confirm ("Ты за сегодня обосрался?") - создаётся окно с вопросом "Ты за сегодня обосрался?"
//  при ответе OK - переменной result присваевается значение true. При нажатии Отмена - False.


// let userName = prompt("Представься, мразь", ''); - создаём диалоговое окно, в котором запрашиваем имя у пользователя, это имя присваеваем переменной userName
// alert(`Привет, ${userName} `); - выводим на экран сообщение, в сообщение встроено значение переменной  userName


// *************************************************** Преобразование типов *******************************************************

// Операторы и функции обычно сами приводят данные в подходящий для них тип. Например alert преобразует любые входные данные в string.
// Математические операторы преобразуют всё в number

// ******************************************Строковое преобразование \ String transform ******************************************

// Используется String(value); для преобразование value в "value".

// let value = true; // - присваиваем значение true переменное value
// console.log (typeof value); // - выводим в консоль тип данных для value, видим boolean.

// value = String(value);// преобразуем тип данных value в string, теперь это не булево True, а текст "true"
// console.log (typeof value); - выводим в консоль данные о типе даннных в value, видим string.

// ******************************************** Чмсленное преобразование \ Number transform ****************************************

// Численное преобразование происходит автоматически в математичиских функциях и выражениях. Например: 
// alert ('6'*'2'); - увидим результат 12, строки преобразуются в числа в процессе математической операции умножения.

// Однако мы можем сами явно выполнить такое преобразование при помощи команды Number(value);, где value -преобразуемое значение. Например:
// let abc = '123';  задаем переменную, данные в ней - string 
// alert(typeof abc); выводим на экран уведомление о типе данных в этой переменной
// let cde = Number(abc); создаём переменную cde, которая содержит в себе преобразованную в цифры функцией Number переменную abc
// alert(typeof cde); выводим на экран тип данных переменной cde, это number

// Это явное преобразование используется когда мы планируем получать данные из текстовых полей форм или другого места,
// которое может классифицироваться не как Number. Если строка не сможет быть приведена к числу, то результатом будет NaN. Например:

// let age = Number("Текст-хуекст"); - создаём переменную age, в которой преобразуем текст из букв в число, разумеется это не получается.
// alert(age); - выводим переменную age на экран, получаем NaN из-за ошибки в преобразовании.


// Значение	Преобразуется в…
// undefined	NaN
// null	0
// true / false	1 / 0
// string	Пробельные символы по краям обрезаются. Если остаётся пустая строка, то получаем 0,
// из непустой строки «считывается» число. При ошибке результат NaN.

// alert( Number("   123   ") ); // 123
// alert( Number("123z") );      // NaN (ошибка чтения числа на месте символа "z")
// alert( Number(true) );        // 1
// alert( Number(false) );       // 0

// NaN и undefined ведут себя по разному! 
// Null становится 0, а undefined превращается в NaN.

// ***************************************** Логическое преобразование \ Logical transform ***************************************

// Такой тип преобразования происходит при обработки логических выражений. Может быть явно запущено функцией Boolean(преобразуемое_значение).
// Интуитивно пустые значения (0, null, undefined, пустая строка и NaN) преобразуются в False
// Всё остальное становится True
// Например "0" это не 0, а не пустой string, который по умолчанию станет true
// следует ВНИМАТЕЛЬНО СМОТРЕТЬ НА ПРЕОБРАЗУЕМНЫЕ ДАННЫЕ

// alert(Boolean(1)); // true
// alert(Boolean(0)); // False
// alert(Boolean("Кек-чебурек")); // True - не пустой string = true
// alert(Boolean("")); // пустой string = false


// ******************************************* Basic operators Math \ Базовые операторы Математика *************************************

// Базовые операторы + - * / работают как ИРЛ.
// Однако в JS есть ряд специфичных терминов. 

// Унарный
// Бинарный
// Операнд

// Операнд - то, к чему применяется оператор. Грубо говоря слогаемое, умножаемое, делимое и делитель
// части над которыми проводится математические операции все операнды.

// Унарный оператор это опрератор, который применяется только кодному операнду. Например:

// let x = 1; задаём х
// x=-x; применяем унарный - к х, х меняет знак. 

// Бинарный это оператор, применяемый к двум опернандам. Тот же самый знак -, но у же при вычитании будет бинарным.JS
// let x = 2, y=2; //задаём х и y
// alert(x-y); //выводим на экран результат математической операции х-у, минус тут бинарный

// формально, унарный минус это отрицание - логическая операция, а не математическая.

// Математика поддерживает следующие операторы:
// + - сложение
// - - вычитание
// * - умножение
// / - деление
// % - взятие остатка после деления
// ** - возведение в степень

// % - взятие отстатка не имеет никакого отношения к процентам, несмотря на используемый символ.
// a % b это остаток от целочисленного деления а на b. Например:
// alert(5%2); // остаток от деления 5\2 это 1
// alert(8%3); // остаток от деления 8/3 это 2

// Возведение в степень прописывается **, форма записи a**b, значит а возведется в степень b. НАпример:

// alert(5**3)// 5 в третьей степени это 125

// Сложение string при помощи бинарного +
// Обычно + работают только с числами. Но в JS можно оперировать им со string.

// Форма string1 + string2 объединит их.  
// let s = "строка1" + "строка2" // задаём строки
// alert(s) // выводим на экран сложенные строки.

// Если хотя бы один из опернандов будет string, то второй преобразуется в string автоматически. Какой из опернандов будет string не имеет значения.

// let a = "stroka" + 2;
// alert(a);

// операторы работают последовательно
// alert (2+2+'1'); результатом будет 41, т.к. 2 и 2 это цифры, а '1' это string.
// alert(2+'1'+2); //даст 212 т.к. 2 цифра, 1 string, а вторая 2 это снова цифра.

// Сложение и преобразование строк свойство исключительно бинарного +.
//  Другие математические операторы не могут выполнять операции над НЕ number. и всегда преобразуют опернанды к числам
// Например:
// alert(6+'2'); // даст 62
// alert(6-'2'); // даст 4, т.к - преобразует '2' в 2

// Унарный плюс так же используется для приведения опернанда в форму number, если изначально он ей не являлся
// При этом с исходными number он ничего не делает. 

// let x = 1; // задаём х
// alert(+x); // выводим х в виде числа
// let y = (-2); // задаём у, он отрицателен
// alert(+y); // вывдим у с унарным плюсом, У ВСЁ РАВНО ОТРИЦАТЕЛЕН
// alert (+true); // преобразует True в 1 и выводит его
// alert (+""); // выводит 0, т.к. undefined преобразуется в false, а false в 0

// По функционалу это то же самое что и Number(x), но короче
// Обычео зачение полей в HTML это string, их невозможно складывать напрямую

// let apples = '2', oranges = '3'; //задаем число яблок и апельсинов как 2 и 3 в виде данных из html формы - string
// alert(apples+oranges); // выводим на экран их сумму и получаем 23, т.к. string приплюсовался к другому string

// let apples = '2', oranges = '3'; //задаем число яблок и апельсинов как 2 и 3 в виде данных из html формы - string
// alert(+apples + +oranges); // в этом случае произойдёт приведение в числовой вид перед сложением, что даст сложение 
// двух numbers с нормально работающей математикой и результатом в 5

// СУЩЕСТВУЕТ ПРИОРИТЕТ ВЫПОЛНЕНИЯ ОПЕРАТОРОВ, ЧЕМ ВЫЩЕ ТЕМ РАНЬШЕ БУДЕТ ВЫПОЛНЯТЬСЯ

// СКОБКИ ВАЖНЕЕ ПРИОРИТЕТА

// ЕСЛИ ПРИОРИТЕТ У ОПЕРАТОРОВ ОДИНАКОВЫЙ, ТО ВЫПОЛНЕНИЕ ПРОИСХОДИТ СЛЕВА НАПРАВО
// унарные операторы выполняются раньше бинарных.

// приоритет присваивания один из самых низких, это сделано для того что бы сложные переменные спера вычислялись, а после присваивались.

// Присваивание = возвращает значение, присваивание можно сипользовать как составную часть другого выражения

// let a=2, b=3; // присваиваем значения переменным а и в
// let c=3-(a=b+1); // вычисляем переменную с, в процессе должно пройти присвоение, необходимое для вычисления
// alert(c); // вывести на экран переменную с

// Присваивание возможно по цепочке
// let a,b,c; // объявляем 3 переменных
// a=b=c=2+2; // присваиваем всем трём одно значение, равное значению мат. операции.

// лучшим видом для операции будет указание в виде:
// let c=2+2;
// let b=c;
// let a=b;

// alert(a),
// alert(b);
// // alert(c);

// Арифметика с присваиванием имеет несильно отличный синтаксис:
// let n =2;
// n=n+5; функционально это n+=5;
// n=n*2; равно n*=2;

// Краткие формы с присваиванием и мат действием одновременно существуют для всех мат функций. /=, *=, -=,  **=и т.д.
// Вызов с присваиванием имеет низкий приоритет, такой же как и обычное присваивание.

// *************************************** ИНкременация\дикреминация *****************************************
// Одни из самых частых операций - увеличение на 1 \ уменьшение на 1, чаще всего применяется в циклах
// Инкремент - ++, увеличивает переменную на 1, дикримент - --, уменьшает переменную на 1.

// let a = 2; // задаем переменную
// a++; // увеличиваем переменную на 1
// alert(a); // выводим переменную

// let b = 3; // задаем переменную
// b--; // уменьшаем переменную на 1
// alert(b); // выводим переменную

// Инкремент \ декримент можно применять только к переменным, number не увеличится\уменьшится и выдаст ошибку.
// Операторы ++ и -- могут распологаться и до и после переменной
// Это называется префиксная и постфиксная формы. ++a и a++ это разные вещи. 

// let a=1; // присваемваем переменную а
// let b = ++a; // присваиваем переменной b значение ++а, идёт увеличение и возврат нового значения
// alert (b); // выводим переменную b, видим уже увеличенное значение

// let a = 1; // присваиваем переменную а
// let b= a++; // присваиваем переменной b значение a++, увеличение идёт с возвратом старого (до увеличения) значения
// alert (b);// выводим на экран переменную b, видим старое значение

// Эти операции можно использовать внутри других выражений, их приоритет выше среднего, они будут выполняться до большинства расчётов.
// let a = 1; // присваиваем переменную а
// alert (2*++a); // Выводим на экран операцию 2* на увеличенное на 1 а, то есть 2*2, видим 4.

// Если результат операции не используется, то нет разницы в каком виде проводить инкреминацию\дикременацию
// Если результат используется далее, то нужна префиксная форма ++х
// Если нужно увеличение и использование старого результата, то нужна постфиксная форма.


// **************************************** Побитовые операторы *******************************************